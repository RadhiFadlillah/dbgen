// Code is generated by dbgen; DO NOT EDIT.

package {{.package}}

import (
	"database/sql"
	"github.com/go-sql-driver/mysql"
	{{range $import := .additionalImports -}}
	"{{$import}}"
	{{end -}}
)

// AdditionalQueries is the additional queries and arguments which used
// when fetching data.
type AdditionalQueries struct {
	SQL  string
	Args []interface{}
}

{{if gt (len .ddlQueries) 0}}
// Structs for DDL queries.

	{{range $query := .ddlQueries -}}
		{{if gt (len $query.Columns) 0}}
			{{$structName := camel $query.TableName -}}
			// {{$structName}} contains data for table "{{$query.TableName}}".
			type {{$structName}} struct {
				{{range $col := $query.Columns -}}
					{{$fieldName := camel $col.Name -}}
					{{$fieldName}} {{columnType $col}} `db:"{{$col.Name}}" json:"{{$col.Name}}"`
				{{end -}}
			}

			{{range $col := $query.Columns -}}
				{{$fieldName := camel $col.Name -}}
				{{$funcName := print "Get" $fieldName -}}
				func (s {{$structName}}) {{$funcName}}() interface{} {
					return s.{{$fieldName}}
				}

			{{end -}}
		{{end}}
	{{end}}
{{end}}

{{if gt (len .selectQueries) 0}}
// Structs for SELECT queries.

	{{range $query := .selectQueries -}}
		{{if eq $query.ResultEntity ""}}
			{{$structName := (print (camel $query.Name) "Result") -}}
			// {{$structName}} contains result of select query "{{$query.Name}}".
			type {{$structName}} struct {
				{{range $col := $query.Columns -}}
					{{$fieldName := camel $col.Name -}}
					{{$fieldName}} {{columnType $col}} `db:"{{$col.Name}}" json:"{{$col.Name}}"`
				{{end -}}
			}
		{{end}}

		{{if gt (len $query.Params) 1}}
			{{$structName := (print (camel $query.Name) "Args") -}}
			// {{$structName}} is input parameter for select query "{{$query.Name}}".
			type {{$structName}} struct {
				{{range $col := $query.Params -}}
					{{$fieldName := camel $col.Name -}}
					{{$fieldName}} interface{} `db:"{{$col.Name}}" json:"{{$col.Name}}"`
				{{end -}}
			}

			{{range $col := $query.Params -}}
				{{$fieldName := camel $col.Name -}}
				{{$funcName := print "Get" $fieldName -}}
				func (s {{$structName}}) {{$funcName}}() interface{} {
					return s.{{$fieldName}}
				}

			{{end -}}
		{{end}}
	{{end}}
{{end}}

{{if gt (len .execQueries) 0}}
// Structs for EXEC queries.

	{{range $query := .execQueries -}}
		{{if gt (len $query.Params) 1}}
			{{$structName := (print (camel $query.Name) "Args") -}}
			// {{$structName}} is input parameter for exec query "{{$query.Name}}".
			type {{$structName}} struct {
				{{range $col := $query.Params -}}
					{{$fieldName := camel $col.Name -}}
					{{$fieldName}} interface{} `db:"{{$col.Name}}" json:"{{$col.Name}}"`
				{{end -}}
			}

			{{range $col := $query.Params -}}
				{{$fieldName := camel $col.Name -}}
				{{$funcName := print "Get" $fieldName -}}
				func (s {{$structName}}) {{$funcName}}() interface{} {
					return s.{{$fieldName}}
				}

			{{end -}}
		{{end}}
	{{end}}
{{end}}